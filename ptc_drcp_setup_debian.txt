DEBIAN/PTC SETUP
_________________________
_____________________________________
start servers:
psql -U ptc_user -d ptc_user
Wizard_admin99

superuser info:
username: ptc_user
pss: wizard_Admin99
email: kstep

trouble shooting django:
python manage.py runserver --verbosity 3


1.
cd /home/repos/ptc_drcp

2.
source venv/bin/activate

3.
cd backend

4.check the db first:
sudo service postgresql start
sudo service postgresql status

python manage.py runserver

5.
start redis if not running (for celery server):

check if redis is running and if you can reach out to it:
redis-cli ping

start redis if no systemd:
sudo service redis-server start

or directly run redis server:
redis-server

check iof redis is listening on the right port:
netstat -lnp | grep 6379

or try:

run celery inside venv from backend dir:
celery -A core worker --loglevel=info --uid=celeryuser

sudo service redis-server start
sudo service redis-server status


or
sudo -u celeryuser /home/repos/ptc_temp/backend/venv/bin/celery -A core worker --loglevel=info

pip install redis
pip install kombu celery


6.
cd frontend

7.
npm start


8. 
Ensure PostgreSQL Server is Running:
You've already started the PostgreSQL service, so this step is good.


sudo service postgresql start

Connect to PostgreSQL:
Connect to the PostgreSQL server using the psql command-line tool. You'll want to use the correct database name (ptc_db in your case).



sudo -u postgres psql

List Databases:
Once you're in the PostgreSQL prompt, you can list all databases to confirm your database name.


\l

Connect to Your Database:
Connect to your specific database (ptc_db) using the psql command.


\c ptc_db

List Tables:
List all tables in the connected database.

\dt

Query Tables:
Run SQL queries to see the contents of specific tables.

SELECT * FROM users LIMIT 10;


login to postgres server in bash:

psql -U ptc_user -d ptc_user

        'NAME': 'ptc_db',
        'USER': 'ptc_user',
        'PASSWORD': 'password',

superuser info:
username: ptc_user
pss: wizard_Admin99
email: kstep


sudo -u postgres psql
ALTER USER ptc_user WITH PASSWORD 'password';
\q

________________________________________________________________
___________________________________________________________________
start postgres if not starting (outside of venv):

sudo service postgresql start
sudo service postgresql status

change password from ms account to password:

psql -U ptc_user -d ptc_user -h localhost

-----------------------------------------------------------

begine project with linux updates:

sudo apt update
sudo apt upgrade

------------------------------------------

install python dependancies:

sudo apt install python3 python3-pip python3-venv postgresql postgresql-contrib libpq-dev build-essential redis-server

---------------------------------------------------------

startup dir path:

root@DimensionX:~# cd ..
root@DimensionX:/# cd home/repos/ptc_drcp
root@DimensionX:/home/repos/ptc_drcp#

--------------------------------------------------

create and activate venv:

python3.9 -m venv myenv
source venv/bin/activate
deactivate

---------------------------------------------------------------------

start redis if not running (for celery server):

check if redis is running and if you can reach out to it:
redis-cli ping

start redis:
sudo systemctl start redis

start redis if no systemd:
sudo service redis-server start

or directly run redis server:
redis-server

check iof redis is listening on the right port:
netstat -lnp | grep 6379

run celery inside venv from backend dir:
celery -A core worker --loglevel=info --uid=celeryuser

----------------------------------------------------------------------

install djangop and dependencies (inside venv):
pip install django djangorestframework psycopg2-binary celery redis


make django backend:
django-admin startproject core .

cd core
django-admin startapp myapp

enter django settings from core dir:
nano core/settings.py

paste this in:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ptc_db',
        'USER': 'ptc_user',
        'PASSWORD': 'yourpassword',
        'HOST': 'localhost',
        'PORT': '5433',
    }
}

# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

--------------------------------------------------

create celery py:
nano core/celery.py


ad this to celery.py:
from __future__ import absolute_import, unicode_literals
import os
from celery import Celery

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')

app = Celery('core')

app.config_from_object('django.conf:settings', namespace='CELERY')

app.autodiscover_tasks()


Update core/__init__.py to load the Celery app:

nano core/__init__.py


add this top __inti__.py:

from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = ('celery_app',)



Create Celery Configuration File:

start celery server:

celery -A ptc worker --loglevel=info

--------------------------------------------------


run django backend server:

python manage.py runserver
----------------------------------------------------

run npm react server:

npm start
----------------------------------------------------

linux file and dir permissions:

sudo chown -R sk99:sk99 /home/repos/ptc_drcp/backend

remove dir:

rm -rf /path/to/directory

-------------------------------------------------------

postgres startup and config:

check status:
sudo service postgresql status

start service:
sudo service postgresql start


create user and db:
sudo -i -u postgres
psql

find config file:
sudo find /etc -name postgresql.conf

open config file and check its listening on port 5432:
sudo nano /etc/postgresql/13/main/postgresql.conf

update this to allow local connections:
sudo nano /etc/postgresql/13/main/pg_hba.conf


user guide for postgres in Bash:
***********************************

list all tables:

\dt

connect to db dand view all tables:

psql -U ptc_user -d ptc_db -h 127.0.0.1 -p 5433 -c "\dt"


Describe Table Structure


This command shows the column names, data types, and other information about constraints for the table.
To examine the structure of a specific table (e.g., users_table), use:

\d users_table

Query Data:

psql -U ptc_user -d ptc_db -h 127.0.0.1 -p 5433 -c "SELECT * FROM users LIMIT 10;"



Common PostgreSQL Commands for Web Development:

Creating a New Table

You might need to create tables manually sometimes:

CREATE TABLE employees (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100),
  department VARCHAR(50),
  salary NUMERIC
);


Inserting Data
Insert data into the table:

INSERT INTO employees (name, department, salary) VALUES ('John Doe', 'Finance', 75000);
Updating Data


Modify existing data in a table:

UPDATE employees SET salary = 80000 WHERE name = 'John Doe';
Deleting Data


Remove data from a table:

DELETE FROM employees WHERE name = 'John Doe';
Running Batch SQL Commands


Sometimes, you might need to run a series of SQL commands stored in a file:

psql -U ptc_user -d ptc_db -h 127.0.0.1 -p 5433 -f /path/to/your/file.sql
Exporting and Importing Data


Export a table to a CSV file:

psql -U ptc_user -d ptc_db -h 127.0.0.1 -p 5433 -c "COPY users TO '/path/to/your/users.csv' DELIMITER ',' CSV HEADER;"
Import data from a CSV file:

psql -U ptc_user -d ptc_db -h 127.0.0.1 -p 5433 -c "COPY users FROM '/path/to/your/users.csv' DELIMITER ',' CSV HEADER;"
Viewing Query Plans


Check how PostgreSQL plans to execute a query:

EXPLAIN SELECT * FROM users WHERE department = 'Finance';
General Tips


General Tips
Use Transactions: For operations that modify data, use transactions (BEGIN, COMMIT, and ROLLBACK) to ensure data integrity.
Regular Maintenance: Run maintenance tasks such as VACUUM and ANALYZE periodically to optimize database performance.
Monitor Performance: Use EXPLAIN and EXPLAIN ANALYZE to understand and optimize queries.


------------------------------------------------------


set up react:

cd ptc_drcp
npx create-react-app frontend

cd frontend
npm start

---------------------------------------------------------

after migrations:
create django superuser:

python manage.py createsuperuser

setup superuser:
username: ptc_user
pss: wizard_Admin99
email: kstep

--------------------------------------------------------

Install rsync:
Ensure rsync is installed on your system.

sudo apt-get install rsync
Copy the Directory:
Use rsync to copy the directory, preserving symbolic links.

template:
rsync -av --progress /path/to/source /path/to/destination
used:
rsync -av --progress /home/repos/ptc_drcp /home

-----------

Using tar to Create an Archive

Create a tar Archive:
Create a compressed archive of your project directory, which will preserve symbolic links.


tar -czvf project_backup.tar.gz /home/repos/ptc_drcp
Move the Archive:
Move the archive file to your desired backup location.


mv project_backup.tar.gz /path/to/backup/location
Extract the Archive:
To restore, extract the archive at the desired location.

tar -xzvf project_backup.tar.gz -C /path/to/extract
Using Windows Subsystem for Linux 

--------------------------------------------------------

create apps:

django-admin startapp users
django-admin startapp lidar
django-admin startapp admin

------------------------------------------------------

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'your-secret-key'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'



psql -U ptc_user -d ptc_db -h localhost


ALTER USER ptc_user PASSWORD 'Wizard_admin99';

data location:
/var/lib/postgresql/13/main

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ptc_db',
        'USER': 'ptc_user',
        'PASSWORD': 'yourpassword',
        'HOST': 'localhost',
        'PORT': '5433',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'


ALTER USER ptc_user WITH PASSWORD 'password';
\q


CREATE USER ptc_user WITH PASSWORD 'password';



Step 1: Create the User and Grant Privileges
Create the User:

sql
Copy code
CREATE USER ptc_user WITH PASSWORD 'yourpassword';
Grant Privileges to the User:

sql
Copy code
GRANT ALL PRIVILEGES ON DATABASE ptc_db TO ptc_user;
Exit the PostgreSQL Prompt:

sql
Copy code
\q
Exit the postgres User Session:

bash
Copy code
exit
Step 2: Update settings





The warnings you're seeing are common in Celery and can be addressed as follows:

Warning 1: Running Worker with Superuser Privileges
This warning indicates that you are running the Celery worker as the root user, which is generally not recommended due to security reasons.

Solution:
You can run the Celery worker as a non-root user. For example:

Create a New User:

If you don't already have a non-root user, create one:

bash
Copy code
sudo adduser celeryuser
Change Ownership of Your Project Directory:

Ensure the new user has access to your project directory:

bash
Copy code
sudo chown -R celeryuser:celeryuser /home/repos/ptc_drcp
Run Celery as the New User:

Switch to the new user and run Celery:

bash
Copy code
sudo -u celeryuser -H bash -c 'source /home/repos/ptc_drcp/backend/venv/bin/activate && celery -A core worker --loglevel=info'
Warning 2: CPendingDeprecationWarning
This warning indicates that the broker_connection_retry setting will change behavior in Celery 6.0. If you want to maintain the current behavior, you should set broker_connection_retry_on_startup to True.

Solution:
Add the new setting in your settings.py:

Update settings.py:

python
Copy code
# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
Summary of Changes
Running Celery as a Non-Root User:

Create a non-root user (celeryuser).
Change ownership of the project directory to celeryuser.
Run Celery as celeryuser.
Update Celery Settings in settings.py:

python
Copy code
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
These steps will help you address the warnings and ensure your Celery worker runs securely and correctly. Let me know if you need further assistance!



# DO NOT DISABLE!
# If you change this first entry you will need to make sure that the
# database superuser can access the database using some other method.
# Noninteractive access to all databases is required during automatic
# maintenance (custom daily cronjobs, replication, and similar tasks).
#
# Database administrative login by Unix domain socket
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD
local	all		all					peer
host	all		all		127.0.0.1/32		md5
host	all		all		::1/128			md5
# "local" is for Unix domain socket connections only
local   all             all                                     md5
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     peer
host    replication     all             127.0.0.1/32            md5
host    replication     all             ::1/128                 md5



# PostgreSQL Client Authentication Configuration File
# ===================================================

# Database administrative login by Unix domain socket
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD
# "local" is for Unix domain socket connections only
local   all             all                                     md5

# IPv4 and IPv6 local connections:
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5

# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     peer
host    replication     all             127.0.0.1/32            md5
host    replication     all             ::1/128                 md5


















ld original psql file: pg_hba.conf:



# PostgreSQL Client Authentication Configuration File
# ===================================================
#
# Refer to the "Client Authentication" section in the PostgreSQL
# documentation for a complete description of this file.  A short
# synopsis follows.
#
# This file controls: which hosts are allowed to connect, how clients
# are authenticated, which PostgreSQL user names they can use, which
# databases they can access.  Records take one of these forms:
#
# local         DATABASE  USER  METHOD  [OPTIONS]
# host          DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostssl       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnossl     DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostgssenc    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnogssenc  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
#
# (The uppercase items must be replaced by actual values.)
#
# The first field is the connection type: "local" is a Unix-domain
# socket, "host" is either a plain or SSL-encrypted TCP/IP socket,
# "hostssl" is an SSL-encrypted TCP/IP socket, and "hostnossl" is a
# non-SSL TCP/IP socket.  Similarly, "hostgssenc" uses a
# GSSAPI-encrypted TCP/IP socket, while "hostnogssenc" uses a
# non-GSSAPI socket.
#
# DATABASE can be "all", "sameuser", "samerole", "replication", a
# database name, or a comma-separated list thereof. The "all"
# keyword does not match "replication". Access to replication
# must be enabled in a separate record (see example below).
#
# USER can be "all", a user name, a group name prefixed with "+", or a
# comma-separated list thereof.  In both the DATABASE and USER fields
# you can also write a file name prefixed with "@" to include names
# from a separate file.
#
# ADDRESS specifies the set of hosts the record matches.  It can be a
# host name, or it is made up of an IP address and a CIDR mask that is
# an integer (between 0 and 32 (IPv4) or 128 (IPv6) inclusive) that
# specifies the number of significant bits in the mask.  A host name
# that starts with a dot (.) matches a suffix of the actual host name.
# Alternatively, you can write an IP address and netmask in separate
# columns to specify the set of hosts.  Instead of a CIDR-address, you
# can write "samehost" to match any of the server's own IP addresses,
# or "samenet" to match any address in any subnet that the server is
# directly connected to.
#
# METHOD can be "trust", "reject", "md5", "password", "scram-sha-256",
# "gss", "sspi", "ident", "peer", "pam", "ldap", "radius" or "cert".
# Note that "password" sends passwords in clear text; "md5" or
# "scram-sha-256" are preferred since they send encrypted passwords.
#
# OPTIONS are a set of options for the authentication in the format
# NAME=VALUE.  The available options depend on the different
# authentication methods -- refer to the "Client Authentication"
# section in the documentation for a list of which options are
# available for which authentication methods.
#
# Database and user names containing spaces, commas, quotes and other
# special characters must be quoted.  Quoting one of the keywords
# "all", "sameuser", "samerole" or "replication" makes the name lose
# its special character, and just match a database or username with
# that name.
#
# This file is read on server startup and when the server receives a
# SIGHUP signal.  If you edit the file on a running system, you have to
# SIGHUP the server for the changes to take effect, run "pg_ctl reload",
# or execute "SELECT pg_reload_conf()".
#
# Put your actual configuration here
# ----------------------------------
#
# If you want to allow non-local connections, you need to add more
# "host" records.  In that case you will also need to make PostgreSQL
# listen on a non-local interface via the listen_addresses
# configuration parameter, or via the -i or -h command line switches.




# DO NOT DISABLE!
# If you change this first entry you will need to make sure that the
# database superuser can access the database using some other method.
# Noninteractive access to all databases is required during automatic
# maintenance (custom daily cronjobs, replication, and similar tasks).
#
# Database administrative login by Unix domain socket
local   all             postgres                                peer

# TYPE  DATABASE        USER            ADDRESS                 METHOD
local	all		all					peer
host	all		all		127.0.0.1/32		md5
host	all		all		::1/128			md5
# "local" is for Unix domain socket connections only
local   all             all                                     md5
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 md5
# Allow replication connections from localhost, by a user with the
# replication privilege.
local   replication     all                                     peer
host    replication     all             127.0.0.1/32            md5
host    replication     all             ::1/128                 md5





CREATE USER sk99 WITH PASSWORD 'password';
CREATE USER ptc_user WITH PASSWORD 'password';




CREATE DATABASE ptc_db OWNER ptc_user;


ALTER USER postgres PASSWORD 'password';







git config --global user.name "sk99-portfolio"
git config --global user.email "stephenkryworuchka@outlook.com"










"xdotool key ctrl+c"
b:1













